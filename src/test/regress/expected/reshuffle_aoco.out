\set options 'with (appendonly = true, orientation = column)'
drop schema if exists test_reshuffle_aoco;
NOTICE:  schema "test_reshuffle_aoco" does not exist, skipping
create schema test_reshuffle_aoco;
set search_path='test_reshuffle_aoco';
set gp_create_table_default_numsegments to 'any';
-- Hash distributed tables
set gp_create_table_any_numsegments to 2;
Create table t1(a int, b int, c int) :options;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t1 select i,i,0 from generate_series(1,100) I;
Update t1 set c = gp_segment_id;
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
    49
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
    51
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
     0
(1 row)

Alter table t1 set with (reshuffle);
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
    32
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
    40
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
    28
(1 row)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
set gp_create_table_any_numsegments to 1;
Create table t1(a int, b int, c int) :options;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t1 select i,i,0 from generate_series(1,100) I;
Update t1 set c = gp_segment_id;
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
   100
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
     0
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
     0
(1 row)

Alter table t1 set with (reshuffle);
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
    32
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
    40
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
    28
(1 row)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
set gp_create_table_any_numsegments to 2;
Create table t1(a int, b int, c int) :options distributed by (a,b);
insert into t1 select i,i,0 from generate_series(1,100) I;
Update t1 set c = gp_segment_id;
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
    51
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
    49
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
     0
(1 row)

Alter table t1 set with (reshuffle);
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
    31
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
    35
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
    34
(1 row)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
set gp_create_table_any_numsegments to 1;
Create table t1(a int, b int, c int) :options distributed by (a,b);
insert into t1 select i,i,0 from generate_series(1,100) I;
Update t1 set c = gp_segment_id;
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
   100
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
     0
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
     0
(1 row)

Alter table t1 set with (reshuffle);
Select count(*) from t1 where gp_segment_id=0;
 count 
-------
    31
(1 row)

Select count(*) from t1 where gp_segment_id=1;
 count 
-------
    35
(1 row)

Select count(*) from t1 where gp_segment_id=2;
 count 
-------
    34
(1 row)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
set gp_create_table_any_numsegments to 1;
Create table t1(a int, b int, c int) :options distributed by (a) partition by list(b) (partition t1_1 values(1), partition t1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_1" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_2" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_other" for table "t1"
insert into t1 select i,i,0 from generate_series(1,100) I;
Alter table t1 set with (reshuffle);
Select count(*) from t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from t1 where gp_segment_id=1;
 ?column? 
----------
 t
(1 row)

Select count(*) > 0 from t1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table t1;
set gp_create_table_any_numsegments to 2;
Create table t1(a int, b int, c int) :options distributed by (a) partition by list(b) (partition t1_1 values(1), partition t1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_1" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_2" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_other" for table "t1"
insert into t1 select i,i,0 from generate_series(1,100) I;
Alter table t1 set with (reshuffle);
Select count(*) from t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from t1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table t1;
set gp_create_table_any_numsegments to 1;
Create table t1(a int, b int, c int) :options distributed by (a,b) partition by list(b) (partition t1_1 values(1), partition t1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_1" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_2" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_other" for table "t1"
insert into t1 select i,i,0 from generate_series(1,100) I;
Alter table t1 set with (reshuffle);
Select count(*) from t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from t1 where gp_segment_id=1;
 ?column? 
----------
 t
(1 row)

Select count(*) > 0 from t1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table t1;
set gp_create_table_any_numsegments to 2;
Create table t1(a int, b int, c int) :options distributed by (a,b) partition by list(b) (partition t1_1 values(1), partition t1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_1" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_2" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_other" for table "t1"
insert into t1 select i,i,0 from generate_series(1,100) I;
Alter table t1 set with (reshuffle);
Select count(*) from t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from t1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table t1;
-- Random distributed tables
set gp_create_table_any_numsegments to 1;
Create table r1(a int, b int, c int) :options distributed randomly;
insert into r1 select i,i,0 from generate_series(1,100) I;
Update r1 set c = gp_segment_id;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Alter table r1 set with (reshuffle);
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table r1;
set gp_create_table_any_numsegments to 2;
Create table r1(a int, b int, c int) :options distributed randomly;
insert into r1 select i,i,0 from generate_series(1,100) I;
Update r1 set c = gp_segment_id;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Alter table r1 set with (reshuffle);
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table r1;
set gp_create_table_any_numsegments to 1;
Create table r1(a int, b int, c int) :options distributed randomly partition by list(b) (partition r1_1 values(1), partition r1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "r1_1_prt_r1_1" for table "r1"
NOTICE:  CREATE TABLE will create partition "r1_1_prt_r1_2" for table "r1"
NOTICE:  CREATE TABLE will create partition "r1_1_prt_other" for table "r1"
insert into r1 select i,i,0 from generate_series(1,100) I;
Alter table r1 set with (reshuffle);
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=1;
 ?column? 
----------
 t
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table r1;
set gp_create_table_any_numsegments to 2;
Create table r1(a int, b int, c int) :options distributed randomly partition by list(b) (partition r1_1 values(1), partition r1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "r1_1_prt_r1_1" for table "r1"
NOTICE:  CREATE TABLE will create partition "r1_1_prt_r1_2" for table "r1"
NOTICE:  CREATE TABLE will create partition "r1_1_prt_other" for table "r1"
insert into r1 select i,i,0 from generate_series(1,100) I;
Alter table r1 set with (reshuffle);
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=1;
 ?column? 
----------
 t
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

drop table r1;
-- Replicated tables
set gp_create_table_any_numsegments to 1;
Create table r1(a int, b int, c int) :options distributed replicated;
insert into r1 select i,i,0 from generate_series(1,100) I;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Alter table r1 set with (reshuffle);
Select count(*) from r1;
 count 
-------
   100
(1 row)

drop table r1;
set gp_create_table_any_numsegments to 2;
Create table r1(a int, b int, c int) :options distributed replicated;
insert into r1 select i,i,0 from generate_series(1,100) I;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Alter table r1 set with (reshuffle);
Select count(*) from r1;
 count 
-------
   100
(1 row)

drop table r1;
